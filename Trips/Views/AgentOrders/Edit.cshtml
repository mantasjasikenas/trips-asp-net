@model Trips.Models.AgentOrdersE;
@{
    Layout = "_Layout";
    ViewData["Title"] = "Edit agent orders";
}

<div class="main-content-header">
    <h4 class="title">@ViewData["title"]</h4>
    <br/>
</div>

<div class="main-content-ced">
    @using (Html.BeginForm(FormMethod.Post, new {@class = "entity-ce"}))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        @Html.HiddenFor(m => m.Agent.Id)

        <fieldset>
            <div class="form-group">
                @Html.LabelFor(m => m.Agent.FirstName)
                @Html.EditorFor(m => m.Agent.FirstName)
                @Html.ValidationMessageFor(m => m.Agent.FirstName, "")
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Agent.LastName)
                @Html.EditorFor(m => m.Agent.LastName)
                @Html.ValidationMessageFor(m => m.Agent.LastName, "")
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Agent.Phone)
                @Html.EditorFor(m => m.Agent.Phone)
                @Html.ValidationMessageFor(m => m.Agent.Phone, "")
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Agent.Email)
                @Html.EditorFor(m => m.Agent.Email)
                @Html.ValidationMessageFor(m => m.Agent.Email, "")
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Agent.FkTravelAgencyId)
                @Html.DropDownListFor(m => m.Agent.FkTravelAgencyId, (IEnumerable<SelectListItem>) ViewData["travelAgencies"]!)
                @Html.ValidationMessageFor(m => m.Agent.FkTravelAgencyId, "")
            </div>

        </fieldset>

        <fieldset>
            <br/>
            <div class="container-fluid d-flex d-row justify-content-around align-items-center">
                <legend style="width: unset; margin-bottom: 0;">Agent approved orders</legend>
            </div>

            <div class="container-fluid d-flex d-row justify-content-start align-items-center ps-0">
                <button
                    formnovalidate
                    value="Add"
                    formaction="@Url.Action("AddNewOrderEdit", new {id = Model.Agent.Id})"
                    class="btn btn-outline-info btn-sm">
                    <i class="fa-solid fa-plus"></i> Add
                </button>
            </div>

            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Adults count</th>
                    <th>Children count</th>
                    <th>Total price</th>
                    <th>Order status</th>
                    <th>Luggage size</th>
                    <th>Agent</th>
                    <th>Customer</th>
                    <th>Trip</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @for (var i = 0; i < Model.Orders?.Count; i++)
                {
                    <tr>
                        <td class="form-group">
                            @Html.HiddenFor(m => Model.Orders[i].Id)
                            @Html.EditorFor(m => Model.Orders[i].AdultsCount)
                            @Html.ValidationMessageFor(m => Model.Orders[i].AdultsCount, "")
                        </td>

                        <td class="form-group">
                            @Html.EditorFor(m => Model.Orders[i].ChildrenCount)
                            @Html.ValidationMessageFor(m => Model.Orders[i].ChildrenCount, "")
                        </td>

                        <td class="form-group">
                            @Html.EditorFor(m => Model.Orders[i].FinalPrice)
                            @Html.ValidationMessageFor(m => Model.Orders[i].FinalPrice, "")
                        </td>

                        <td class="form-group">
                            @Html.DropDownListFor(m => Model.Orders[i].StatusId, (IEnumerable<SelectListItem>) ViewData["statuses"]!, "")
                            @Html.ValidationMessageFor(m => Model.Orders[i].StatusId, "")
                        </td>

                        <td class="form-group">
                            @Html.DropDownListFor(m => Model.Orders[i].LuggageSizeId, (IEnumerable<SelectListItem>) ViewData["luggageSizes"]!, "")
                            @Html.ValidationMessageFor(m => Model.Orders[i].LuggageSizeId, "")
                        </td>

                        <td class="form-group">
                            @Html.DropDownListFor(m => Model.Orders[i].FkAgentId, (IEnumerable<SelectListItem>) ViewData["agents"]!)
                            @Html.ValidationMessageFor(m => Model.Orders[i].FkAgentId, "")
                        </td>

                        <td class="form-group">
                            @Html.DropDownListFor(m => Model.Orders[i].FkCustomerId, (IEnumerable<SelectListItem>) ViewData["customers"]!, "")
                            @Html.ValidationMessageFor(m => Model.Orders[i].FkCustomerId, "")
                        </td>

                        <td class="form-group">
                            @Html.DropDownListFor(m => Model.Orders[i].FkTripId, (IEnumerable<SelectListItem>) ViewData["trips"]!, "")
                            @Html.ValidationMessageFor(m => Model.Orders[i].FkTripId, "")
                        </td>

                        <td>
                            <button
                                formnovalidate
                                formaction="@Url.Action("DeleteOrder", new {id = Model.Agent.Id, index = i, returnTo = "Edit"})"
                                class="btn btn-outline-danger btn-sm">
                                <i class="fa-solid fa-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </fieldset>


        <br/>
        <div class="container-fluid d-flex d-row justify-content-start ps-0">
            <button
                formnovalidate
                formmethod="get"
                formaction="@Url.Action("CancelEdit", new {id = Model.Agent.Id})"
                class="btn btn-outline-danger btn-sm">
                <i class="fa-solid fa-plus"></i> Cancel
            </button>

            <button
                formnovalidate
                formmethod="get"
                formaction="@Url.Action("ResetEdit", new {id = Model.Agent.Id})"
                class="btn btn-outline-warning btn-sm">
                <i class="fa-solid fa-plus"></i> Reset
            </button>

            <button
                type="submit"
                formaction="@Url.Action("Edit", new {id = Model.Agent.Id})"
                class="btn btn-outline-success btn-sm">
                <i class="fa-solid fa-plus"></i> Save
            </button>

        </div>
    }
</div>